#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int NUM_NODES = 5;

// Landmarks mapped by index
string landmarks[NUM_NODES] = {
    "College Gate",  // 0
    "Library",       // 1
    "Admin Block",   // 2
    "Canteen",       // 3
    "Hostel"         // 4
};

// Adjacency list
vector<int> graph[NUM_NODES];

// Add edge between two nodes
void addEdge(int u, int v) {
    graph[u].push_back(v);
    graph[v].push_back(u); // Undirected graph
}

// DFS function
void DFS(int node, bool visited[]) {
    visited[node] = true;
    cout << landmarks[node] << " -> ";
    for (size_t i = 0; i < graph[node].size(); i++) {
        int neighbor = graph[node][i];
        if (!visited[neighbor]) {
            DFS(neighbor, visited);
        }
    }
}

// BFS function
void BFS(int start) {
    bool visited[NUM_NODES] = {false};
    queue<int> q;

    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        cout << landmarks[current] << " -> ";

        for (size_t i = 0; i < graph[current].size(); i++) {
            int neighbor = graph[current][i];
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

int main() {
    // Build the graph
    addEdge(0, 1); // College Gate - Library
    addEdge(0, 2); // College Gate - Admin Block
    addEdge(1, 3); // Library - Canteen
    addEdge(2, 4); // Admin Block - Hostel
    addEdge(3, 4); // Canteen - Hostel

    // DFS
    cout << "DFS starting from College Gate:\n";
    bool visitedDFS[NUM_NODES] = {false};
    DFS(0, visitedDFS);

    // BFS
    cout << "\n\nBFS starting from College Gate:\n";
    BFS(0);

    cout << endl;
    return 0;
}

