#include<iostream>
using namespace std;
struct Node
{
 int data;
 Node *left,*right;
 Node(int val):data(val),left(NULL),right(NULL)
{
}
};
class BST
{
public:
 Node* root;
 BST(): root(NULL)
 {
 }
 Node* insert (Node* root,int data)
 {
 if(!root) return new Node(data);
 if(data<root->data) root->left=insert(root->left,data);
 else if(data>root->data)root->right=insert(root->right,data);
 return root;
 }
void inorder(Node*root)
{
 if(!root)return;
 inorder(root->left);
 cout<<root->data<<" ";
 inorder(root->right);
}
};
int main()
{
 BST tree;
 int values[]={50,30,70,20,40,60,80};
 for(int val : values)
 {
 tree.root=tree.insert(tree.root,val);
 }
cout<<"Inorder traversal of Initial BST:";
tree.inorder(tree.root);
cout<<endl;
tree.root=tree.insert(tree.root,65);
cout<<"Inorder Traversal after Inserting 65:";
tree.inorder(tree.root);
cout<<endl;
return 0;
}