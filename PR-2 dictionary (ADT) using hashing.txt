#include <iostream>
#include <string>
#include <stdexcept>
using namespace std;

// Node structure for linked list
class Node {
public:
    string key;
    int value;
    Node* next;

    Node(string k, int v) {
        key = k;
        value = v;
        next = NULL;
    }
};

// Hash table using chaining
class ChainingDictionary {
private:
    int size;
    Node** table;

    int hashFunction(string key) {
        unsigned int hash = 0;
        for (int i = 0; i < key.length(); i++) {
            hash = (hash * 31 + key[i]) % size;
        }
        return hash;
    }

public:
    ChainingDictionary(int s) {
        size = s;
        table = new Node*[size];
        for (int i = 0; i < size; ++i) {
            table[i] = NULL;
        }
    }

    ~ChainingDictionary() {
        for (int i = 0; i < size; ++i) {
            Node* current = table[i];
            while (current != NULL) {
                Node* toDelete = current;
                current = current->next;
                delete toDelete;
            }
        }
        delete[] table;
    }

    void insert(string key, int value) {
        int index = hashFunction(key);
        Node* current = table[index];
        while (current != NULL) {
            if (current->key == key) {
                current->value = value; // Overwrite
                return;
            }
            current = current->next;
        }
        Node* newNode = new Node(key, value);
        newNode->next = table[index];
        table[index] = newNode;
    }

    int find(string key) {
        int index = hashFunction(key);
        Node* current = table[index];
        while (current != NULL) {
            if (current->key == key) {
                return current->value;
            }
            current = current->next;
        }
        throw runtime_error("Key '" + key + "' not found");
    }

    void deleteKey(string key) {
        int index = hashFunction(key);
        Node* current = table[index];
        Node* prev = NULL;
        while (current != NULL) {
            if (current->key == key) {
                if (prev == NULL) {
                    table[index] = current->next;
                } else {
                    prev->next = current->next;
                }
                delete current;
                return;
            }
            prev = current;
            current = current->next;
        }
        throw runtime_error("Key '" + key + "' not found");
    }

    void display() {
        for (int i = 0; i < size; ++i) {
            cout << "Bucket " << i << ": ";
            Node* current = table[i];
            if (current == NULL) {
                cout << "Empty" << endl;
                continue;
            }
            while (current != NULL) {
                cout << "(" << current->key << ", " << current->value << ") -> ";
                current = current->next;
            }
            cout << "None" << endl;
        }
    }
};

// Main testing
int main() {
    ChainingDictionary dict(10);

    dict.insert("one", 1);
    dict.insert("seven", 2);
    dict.insert("three", 3);
    dict.insert("three", 4); // Overwrites value
    dict.insert("four", 4);

    dict.display();

    try {
        cout << "Value of 'one': " << dict.find("one") << endl;
        cout << "Value of 'seven': " << dict.find("seven") << endl;
        cout << "Value of 'three': " << dict.find("three") << endl;
    } catch (runtime_error& e) {
        cout << e.what() << endl;
    }

    try {
        dict.deleteKey("seven");
    } catch (runtime_error& e) {
        cout << e.what() << endl;
    }

    dict.display();

    return 0;
}
